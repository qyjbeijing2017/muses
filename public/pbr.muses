Shader "Default" {
    Properties {
        _ALBEDO ("ALBEDO", 2D) = "./white.jpg" {}
        _NORMAL ("NORMAL", 2D) = "./normal_blue.jpg" {}
        _METALLIC ("METALLIC", 2D) = "./white.jpg" {}
        _ROUGHNESS ("ROUGHNESS", 2D) = "./white.jpg" {}
        _AO ("AO", 2D) = "./white.jpg" {}
        _BORDER ("BORDER", Color) = (0,1.,0,1.)
        _BORDER_WIDTH ("BORDER WIDTH", Float) = 0.
    }
    
    SubShader {
        Pass {
            // renderstate
            
            // Cull OFF
            ZWrite OFF

            // glsl        
            GLSLPROGRAM
            #include "muses.glsl"

            void vert() {
                mat4 scaleMatrix = mat4(1.0 + _BORDER_WIDTH);
                scaleMatrix[3][3] = 1.0;
                gl_Position = MUSES_MATRIX_MVP * scaleMatrix * MUSES_POSITION;
            }
            
            void frag() {
                gl_FragColor = _BORDER;
            }

            ENDGLSL
        }

        Pass {
            // renderstate

            // glsl
            GLSLPROGRAM
            #include "muses.glsl"

            varying vec3 WorldPos;
            varying vec3 Normal;
            varying vec2 TexCoords;

            const float PI = 3.14159265359;

            vec3 getNormalFromMap() {
                vec3 tangentNormal = texture(_NORMAL, TexCoords).xyz * 2.0 - 1.0;

                vec3 Q1  = dFdx(WorldPos);
                vec3 Q2  = dFdy(WorldPos);
                vec2 st1 = dFdx(TexCoords);
                vec2 st2 = dFdy(TexCoords);

                vec3 N   = normalize(Normal);
                vec3 T  = normalize(Q1*st2.t - Q2*st1.t);
                vec3 B  = -normalize(cross(N, T));
                mat3 TBN = mat3(T, B, N);

                return normalize(TBN * tangentNormal);
            }

            float DistributionGGX(vec3 N, vec3 H, float roughness) {
                float a = roughness*roughness;
                float a2 = a*a;
                float NdotH = max(dot(N, H), 0.0);
                float NdotH2 = NdotH*NdotH;

                float nom   = a2;
                float denom = (NdotH2 * (a2 - 1.0) + 1.0);
                denom = PI * denom * denom;

                return nom / denom;
            }

            float GeometrySchlickGGX(float NdotV, float roughness) {
                float r = (roughness + 1.0);
                float k = (r*r) / 8.0;

                float nom   = NdotV;
                float denom = NdotV * (1.0 - k) + k;

                return nom / denom;
            }

            float GeometrySmith(vec3 N, vec3 V, vec3 L, float roughness) {
                float NdotV = max(dot(N, V), 0.0);
                float NdotL = max(dot(N, L), 0.0);
                float ggx2 = GeometrySchlickGGX(NdotV, roughness);
                float ggx1 = GeometrySchlickGGX(NdotL, roughness);

                return ggx1 * ggx2;
            }

            vec3 fresnelSchlick(float cosTheta, vec3 F0) {
                return F0 + (1.0 - F0) * pow(clamp(1.0 - cosTheta, 0.0, 1.0), 5.0);
            }

            void vert() {
                WorldPos = (MUSES_MATRIX_M * MUSES_POSITION).xyz;
                Normal = mat3(MUSES_MATRIX_M) * aNormal;
                TexCoords = MUSES_TEXCOORD0;
                gl_Position = MUSES_MATRIX_MVP * MUSES_POSITION;
            }
            
            void frag() {
                vec3 albedo     = pow(texture2D(_ALBEDO, TexCoords).rgb, vec3(2.2));
                float metallic  = texture2D(_METALLIC, TexCoords).r;
                float roughness = texture2D(_ROUGHNESS, TexCoords).r;
                float ao        = texture2D(_AO, TexCoords).r;

                vec3 N = getNormalFromMap(); 
                vec3 V = normalize(MUSES_CAMERA_POS - WorldPos);

                // calculate reflectance at normal incidence; if dia-electric (like plastic) use F0 
                // of 0.04 and if it's a metal, use the albedo color as F0 (metallic workflow)    
                vec3 F0 = vec3(0.04); 
                F0 = mix(F0, albedo, metallic);


                vec3 Lo = vec3(0.0);
                for(int i = 0; i < 10; ++i) 
                {
                    // calculate per-light radiance
                    vec3 L = normalize(lightPositions[i] - WorldPos);
                    vec3 H = normalize(V + L);
                    float distance = length(lightPositions[i] - WorldPos);
                    float attenuation = 1.0 / (distance * distance);
                    vec3 radiance = lightColors[i] * attenuation;

                    // Cook-Torrance BRDF
                    float NDF = DistributionGGX(N, H, roughness);   
                    float G   = GeometrySmith(N, V, L, roughness);      
                    vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);

                    vec3 numerator    = NDF * G * F; 
                    float denominator = 4.0 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.0001; // + 0.0001 to prevent divide by zero
                    vec3 specular = numerator / denominator;

                    // kS is equal to Fresnel
                    vec3 kS = F;
                    // for energy conservation, the diffuse and specular light can't
                    // be above 1.0 (unless the surface emits light); to preserve this
                    // relationship the diffuse component (kD) should equal 1.0 - kS.
                    vec3 kD = vec3(1.0) - kS;
                    // multiply kD by the inverse metalness such that only non-metals 
                    // have diffuse lighting, or a linear blend if partly metal (pure metals
                    // have no diffuse light).
                    kD *= 1.0 - metallic;	  

                    // scale light by NdotL
                    float NdotL = max(dot(N, L), 0.0);        

                    // add to outgoing radiance Lo
                    Lo += (kD * albedo / PI + specular) * radiance * NdotL;  // note that we already multiplied the BRDF by the Fresnel (kS) so we won't multiply by kS again
                }   
    


                // ambient lighting (note that the next IBL tutorial will replace 
                // this ambient lighting with environment lighting).
                vec3 ambient = vec3(0.03) * albedo * ao;

                vec3 color = ambient + Lo;
            
                // HDR tonemapping
                color = color / (color + vec3(1.0));
                // gamma correct
                color = pow(color, vec3(1.0/2.2)); 
            
                FragColor = vec4(color, 1.0);

                // vec3 I = normalize(FragPos.xyz - MUSES_CAMERA_POS);
                // vec3 R = reflect(I, normalize(vNormal));
                // vec3 RColor = textureCube(MUSES_SKYBOX, R).rgb;

                // vec3 result = texture2D(_ALBEDO ,vTexCoords).xyz *  MusesLightAll(FragPos, normalize(vNormal));
                // gl_FragColor = vec4(RColor,1.);
            }

            ENDGLSL
        }
    }

    FallBack "Diffuse"
}